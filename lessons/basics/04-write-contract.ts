// 04-write-contract.ts
//
// üì¶ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ERC20-—Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é ethers.js (v6)
// üõ† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ç—å Sepolia –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
// üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–æ—à–µ–ª—å–∫–æ–º —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å, decimals –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã
//
// ---------------------------------------------------------
// üß™ –£–°–¢–ê–ù–û–í–ö–ê:
// 1. –£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//    npm install ethers dotenv
//
// 2. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª `.env` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
//
//    RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_KEY
//    PRIVATE_KEY=0x...             // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç testnet-–∫–æ—à–µ–ª—å–∫–∞
//    TOKEN_ADDRESS=0x...           // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ERC20-—Ç–æ–∫–µ–Ω–∞ –≤ Sepolia
//    RECEIVER=0x...                // –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
//    AMOUNT=0.01                   // –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º)
//
// ---------------------------------------------------------
// üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê:
//    npx tsx 04-write-contract.ts
//    –∏–ª–∏
//    ts-node 04-write-contract.ts
// ---------------------------------------------------------

import { config } from "dotenv";
import { Contract, Wallet, JsonRpcProvider, parseUnits } from "ethers";

config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
const { RPC_URL, PRIVATE_KEY, TOKEN_ADDRESS, RECEIVER, AMOUNT } = process.env;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
if (!RPC_URL || !PRIVATE_KEY || !TOKEN_ADDRESS || !RECEIVER || !AMOUNT) {
  console.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env: –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
const provider = new JsonRpcProvider(RPC_URL);
const wallet = new Wallet(PRIVATE_KEY, provider);

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ERC20 —Ç–æ–∫–µ–Ω–æ–º
const ERC20_ABI = [
  "function transfer(address to, uint256 amount) public returns (bool)",
  "function decimals() public view returns (uint8)",
  "function balanceOf(address owner) external view returns (uint256)",
];

const token = new Contract(TOKEN_ADDRESS, ERC20_ABI, wallet);

async function main() {
  try {
    console.log("üîç –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞...");
    const decimals = await token.decimals();

    if (!AMOUNT) {
      throw new Error("AMOUNT is undefined. Please check your .env file.");
    }
    const amountParsed = parseUnits(AMOUNT, decimals);
    console.log(
      `üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${AMOUNT} —Ç–æ–∫–µ–Ω–æ–≤ (${amountParsed.toString()} –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)`
    );

    const balance = await token.balanceOf(wallet.address);
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞:", balance.toString());

    if (balance < amountParsed) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
    }

    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${balance.toString()}`);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${RECEIVER}`);
    console.log(`üí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${amountParsed.toString()}`);
    console.log("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

    const tx = await token.transfer(RECEIVER, amountParsed);
    console.log(`üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");

    const receipt = await tx.wait();
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
    console.log(`üîó –•—ç—à: ${receipt.transactionHash}`);
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
    console.error(err.message || err);
  }
}

main();
