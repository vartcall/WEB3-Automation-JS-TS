/**
 * üìò –£—Ä–æ–∫: 05-events.ts
 * üéØ –¶–µ–ª—å: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è Transfer —Ç–æ–∫–µ–Ω–∞ ERC20 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —á—Ç–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
 *
 * üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º WebSocket-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Ç Infura –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ethereum Mainnet.
 * ü™ô –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º ERC20 ‚Äî —á–∏—Ç–∞–µ–º –µ–≥–æ name, decimals –∏ —Å–æ–±—ã—Ç–∏—è Transfer.
 *
 * ‚úÖ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 *   - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ WebSocket –∫ Ethereum Mainnet —á–µ—Ä–µ–∑ Infura
 *   - –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —Ç–æ–∫–µ–Ω–∞ (decimals)
 *   - –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è Transfer –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 *   - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å –∞–≤—Ç–æ-–¥—Ä–æ–±–ª–µ–Ω–∏–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–ª–æ–∫–æ–≤
 *
 * üßæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ .env:
 * INFURA_ID=–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Ç–≤–æ–π_INFURA_ID
 * CONTRACT_ADDRESS=–∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞_ERC20_—Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT: 0xdAC17F958D2ee523a2206206994597C13D831ec7)
 * RECEIVER_ADDRESS=–∞–¥—Ä–µ—Å_–ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x28C6c06298d514Db089934071355E5743bf21d60)
 *
 * üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
 *   npm install ethers dotenv
 *
 * üöÄ –ó–∞–ø—É—Å–∫:
 *   ts-node 05-events.ts
 *
 * üí° –û–ü–´–¢:
 *   - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (USDC, DAI, USDT –∏ —Ç.–¥.)
 *   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ WebSocket-–∫–ª—é—á Infura –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */

import { ethers } from "ethers";
import dotenv from "dotenv";
dotenv.config();

// üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
const INFURA_ID = process.env.INFURA_ID!;
const CONTRACT_ADDRESS = ethers.getAddress(process.env.CONTRACT_ADDRESS!);
const RECEIVER_ADDRESS = ethers.getAddress(process.env.RECEIVER_ADDRESS!);
const WEBSOCKET_URL = `wss://mainnet.infura.io/ws/v3/${INFURA_ID}`;

// üîß ABI ‚Äî —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ Transfer
const ABI = [
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "function name() view returns (string)",
  "function decimals() view returns (uint8)",
];

async function main() {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:", WEBSOCKET_URL);
  const provider = new ethers.WebSocketProvider(WEBSOCKET_URL);
  const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, provider);

  // üéì –ò–Ω—Ñ–æ –æ —Ç–æ–∫–µ–Ω–µ
  const name = await contract.name();
  const decimals = await contract.decimals();
  console.log(`üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${CONTRACT_ADDRESS}`);
  console.log(`ü™ô –¢–æ–∫–µ–Ω: ${name}, Decimals: ${decimals}`);
  console.log(`üëÇ –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è Transfer...`);

  // üì° –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  contract.on("Transfer", async (from, to, value, event) => {
    const amount = ethers.formatUnits(value, decimals);

    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ raw log
    const txHash =
      (event as any).log?.transactionHash ||
      (event as any).transactionHash ||
      "(–Ω–µ –Ω–∞–π–¥–µ–Ω)";

    console.log(`üì° –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:`);
    console.log(`   From: ${from}`);
    console.log(`   To:   ${to}`);
    console.log(`   Amount: ${amount} ${name}`);
    console.log(`   Tx: https://etherscan.io/tx/${txHash}`);
    console.log("-----------");
  });

  // üïì –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π (—Å –∞–≤—Ç–æ-–¥—Ä–æ–±–ª–µ–Ω–∏–µ–º –ø–æ –±–ª–æ–∫–∞–º)
  const latestBlock = await provider.getBlockNumber();
  const fromBlock = latestBlock - 2000;

  const filter = contract.filters.Transfer(null, RECEIVER_ADDRESS);
  const events = await safeQueryFilter(
    contract,
    filter,
    fromBlock,
    latestBlock,
    250
  );

  console.log(`\nüìö –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ ${RECEIVER_ADDRESS}:`);
  for (const e of events) {
    const args = (e as ethers.EventLog).args;
    const tx = (e as ethers.EventLog).transactionHash;
    const amount = ethers.formatUnits(args.value, decimals);
    console.log(`‚û°Ô∏è ${args.from} ‚Üí ${args.to}, —Å—É–º–º–∞: ${amount} ${name}`);
    console.log(`üîó https://etherscan.io/tx/${tx}`);
  }
}

// üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
async function safeQueryFilter(
  contract: ethers.Contract,
  filter: ethers.EventFilter | ethers.DeferredTopicFilter,
  from: number,
  to: number,
  initialStep = 250
): Promise<ethers.EventLog[]> {
  const events: ethers.EventLog[] = [];
  let current = from;

  while (current <= to) {
    let step = initialStep;
    let success = false;

    while (!success && step >= 1) {
      const end = Math.min(current + step - 1, to);
      console.log(`üîç –ß—Ç–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ ${current} ‚Üí ${end}`);

      try {
        const logs = await contract.queryFilter(
          filter as ethers.ContractEventName,
          current,
          end
        );
        events.push(...(logs as ethers.EventLog[]));
        current = end + 1;
        success = true;
      } catch (err: any) {
        const isTooManyResults = err?.error?.message?.includes(
          "more than 10000 results"
        );
        if (isTooManyResults) {
          console.warn(
            `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–æ–≥–æ–≤. –ü—Ä–æ–±—É–µ–º —à–∞–≥: ${step} ‚Üí ${Math.floor(
              step / 2
            )}`
          );
          step = Math.floor(step / 2);
        } else {
          console.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
          break;
        }
      }
    }

    if (!success) {
      console.warn(
        `‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ ${current} ‚Üí ${Math.min(
          current + step - 1,
          to
        )} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.`
      );
      current += step;
    }
  }

  return events;
}

main().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", err);
});
