/**
 * üöÄ –£—Ä–æ–∫ 02: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Wallet + Provider (Ethers.js v6)
 *
 * üéØ –¶–µ–ª—å:
 *   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ETH –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å,
 *   –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ EIP-1559 –º–æ–¥–µ–ª—å –∫–æ–º–∏—Å—Å–∏–∏.
 *
 * üì¶ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 *   1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Ethereum-—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ JSON-RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä (Infura, Alchemy, Ankr –∏ –¥—Ä.)
 *   2. –°–æ–∑–¥–∞—ë—Ç Wallet –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 *   3. –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–∞–∑–∞ —á–µ—Ä–µ–∑ provider.getFeeData()
 *   4. –†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç maxFeePerGas —Å –∑–∞–ø–∞—Å–æ–º (baseFee + priorityFee + –±—É—Ñ–µ—Ä)
 *   5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 0.01 ETH –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
 *   6. –î–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
 *   7. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –¥–æ –∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
 *
 * üß± –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 *   - Node.js ‚â• 20.0
 *   - Ethers.js v6
 *   - .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:
 *
 *     RPC_URL=https://sepolia.infura.io/v3/YOUR_PROJECT_ID
 *     PRIVATE_KEY=0xabc123... (–≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
 *     RECEIVER=0x... (–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å –≤–∞—à–∏–º)
 *
 * üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
 *   npm install ethers dotenv
 *
 * ‚öôÔ∏è –ó–∞–ø—É—Å–∫:
 *   npx ts-node 02-send-tx.ts
 *
 * ‚ùó –í–∞–∂–Ω–æ:
 *   - –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –µ—Å—Ç—å ETH (–≤ —Å–µ—Ç–∏ Sepolia –∏–ª–∏ –¥—Ä—É–≥–æ–π)
 *   - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π RECEIVER = YOUR_ADDRESS, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ estimateGas
 *   - –ï—Å–ª–∏ maxFeePerGas < baseFee, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥—ë—Ç (EIP-1559 –ª–æ–≥–∏–∫–∞)
 *
 * üìö –ü–æ–ª–µ–∑–Ω–æ–µ:
 *   - https://docs.ethers.org/v6/
 *   - https://eips.ethereum.org/EIPS/eip-1559
 *   - https://sepoliafaucet.com/
 */

import { config } from "dotenv";
import {
  Wallet,
  JsonRpcProvider,
  formatUnits,
  parseEther,
  parseUnits,
} from "ethers";

config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º .env

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.RPC_URL || !process.env.PRIVATE_KEY || !process.env.RECEIVER) {
  throw new Error(
    "‚ùå –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç RPC_URL, PRIVATE_KEY –∏ RECEIVER"
  );
}

// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –∫–æ—à–µ–ª—ë–∫
const provider = new JsonRpcProvider(process.env.RPC_URL);
const wallet = new Wallet(process.env.PRIVATE_KEY, provider);

async function main() {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É:", await provider.getNetwork());

  const receiver = process.env.RECEIVER;

  // –ë–∞–ª–∞–Ω—Å –¥–æ
  const balanceBefore = await provider.getBalance(wallet.address);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ: ${formatUnits(balanceBefore, "ether")} ETH`);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
  const feeData = await provider.getFeeData();
  const priority = feeData.maxPriorityFeePerGas!;
  const baseFee = feeData.gasPrice!; // gasPrice –≤ EIP-1559 = baseFee

  // maxFee = baseFee + priority + –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä
  const maxFee = baseFee + priority + parseUnits("1", "gwei"); // +1 gwei –±—É—Ñ–µ—Ä

  console.log("üì° –ö–æ–º–∏—Å—Å–∏–∏:");
  console.log("  ‚û§ maxFeePerGas:", formatUnits(maxFee, "gwei"), "gwei");
  console.log("  ‚û§ priorityFee :", formatUnits(priority, "gwei"), "gwei");

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const tx = await wallet.sendTransaction({
    to: receiver,
    value: parseEther("0.01"),
    maxFeePerGas: maxFee,
    maxPriorityFeePerGas: priority,
  });

  console.log("üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", tx.hash);

  // –û–∂–∏–¥–∞–µ–º –º–∞–π–Ω–∏–Ω–≥–∞
  const receipt = await tx.wait();
  if (receipt) {
    console.log("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ:", receipt.blockNumber);
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞: Receipt is null");
  }

  // –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ
  const balanceAfter = await provider.getBalance(wallet.address);
  console.log(`üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${formatUnits(balanceAfter, "ether")} ETH`);
}

main().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", err);
});
