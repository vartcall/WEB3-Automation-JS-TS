/**
 * üîç 03-read-contract.ts - –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (view-—Ñ—É–Ω–∫—Ü–∏–∏)
 *
 * üìò –¶–µ–ª—å:
 *   - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É ERC-20
 *   - –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (name, symbol, decimals, totalSupply, balanceOf)
 *   - –ü–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –∏ Contract –≤ Ethers.js v6
 *
 * üß± –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 *   - Node.js + TypeScript
 *   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
 *       npm install ethers dotenv
 *       npm install -D ts-node typescript @types/node
 *
 * üìÅ .env –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
 *   RPC_URL=https://sepolia.infura.io/v3/KEY
 *   TOKEN_ADDRESS=0x...          // –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ERC20
 *   USER_ADDRESS=0x...           // –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—à–µ–ª—ë–∫)
 *
 * üöÄ –ö–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å:
 *   npx ts-node 03-read-contract.ts
 *
 * üí° –ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ:
 *   - –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞
 *   - –ö–æ–ª-–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
 *   - Total supply —Ç–æ–∫–µ–Ω–∞
 *   - –ë–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
 *
 * üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ:
 *   - –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 *   - –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 *   - –ù–µ —Ç—Ä–∞—Ç–∏—Ç –≥–∞–∑ (—Ç–æ–ª—å–∫–æ RPC-–∑–∞–ø—Ä–æ—Å—ã)
 *
 * üì¶ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:
 *   - –ë–æ—Ç–æ–≤, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –¥–∞—à–±–æ—Ä–¥–æ–≤
 *   - –¢–µ—Å—Ç–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
 */

import { config } from "dotenv";
import { JsonRpcProvider, Contract, formatUnits } from "ethers";

config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º .env

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (
  !process.env.RPC_URL ||
  !process.env.TOKEN_ADDRESS ||
  !process.env.USER_ADDRESS
) {
  throw new Error(
    "‚ùå –£–±–µ–¥–∏—Å—å, —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç RPC_URL, TOKEN_ADDRESS –∏ USER_ADDRESS"
  );
}

const provider = new JsonRpcProvider(process.env.RPC_URL);

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ERC20
const abi = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
];

const tokenAddress = process.env.TOKEN_ADDRESS;
const userAddress = process.env.USER_ADDRESS;

async function main() {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É:", await provider.getNetwork());

  const token = new Contract(tokenAddress, abi, provider);

  // –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
  const [name, symbol, decimals, supply] = await Promise.all([
    token.name(),
    token.symbol(),
    token.decimals(),
    token.totalSupply(),
  ]);

  console.log(`\nüìò –¢–æ–∫–µ–Ω: ${name} (${symbol})`);
  console.log(`üßÆ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ: ${decimals}`);
  console.log(`üì¶ –û–±—â–∏–π supply: ${formatUnits(supply, decimals)} ${symbol}`);

  // –ß–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const balance = await token.balanceOf(userAddress);
  console.log(
    `üí∞ –ë–∞–ª–∞–Ω—Å ${userAddress}: ${formatUnits(balance, decimals)} ${symbol}\n`
  );
}

main().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", err);
});
