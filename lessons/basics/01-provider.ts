/**
 * üß™ –£—Ä–æ–∫ 01 ‚Äî Provider (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä)
 *
 * –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ethereum-—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
 *
 * üì¶ –ß—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º:
 *   npm install ethers dotenv
 *   npm install --save-dev ts-node typescript @types/node
 *
 * üß± tsconfig.json (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω):
 *   npx tsc --init
 *
 * ‚úèÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª .env –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ:
 *
 *   RPC_URL=https://mainnet.infura.io/v3/YOUR_INFURA_KEY
 *   ADDRESS=0x742d35Cc6634C0532925a3b844Bc454e4438f44e
 *
 * üîß –ö–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å:
 *   npx ts-node 01-provider.ts
 *   –∏–ª–∏ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ)
 *   ts-node 01-provider.ts
 *
 * üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª:
 *   - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RPC (Ethereum mainnet)
 *   - –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
 *   - –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ—É –æ —Å–µ—Ç–∏
 *   - –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –≥–∞–∑–∞
 *   - –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
 *
 * ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏:
 *   - –ï—Å–ª–∏ RPC_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Üí –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 *   - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ Infura ID ‚Üí –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ "unsupported protocol"
 *     ‚ûú –£–±–µ–¥–∏—Å—å, —á—Ç–æ RPC_URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
 */

import { JsonRpcProvider, formatUnits } from "ethers";
import * as dotenv from "dotenv";

dotenv.config();

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ RPC_URL
if (!process.env.RPC_URL) {
  throw new Error("‚õîÔ∏è RPC_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
}

const provider = new JsonRpcProvider(process.env.RPC_URL);

async function main() {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É...");

  // 1. –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
  const block = await provider.getBlockNumber();
  console.log("üì¶ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:", block);

  // 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
  const network = await provider.getNetwork();
  console.log("üåê –°–µ—Ç—å:", network.name, `(chainId: ${network.chainId})`);

  // 3. –¶–µ–Ω–∞ –≥–∞–∑–∞
  const feeData = await provider.getFeeData();
  console.log(
    "‚õΩÔ∏è –¶–µ–Ω–∞ –≥–∞–∑–∞:",
    feeData.gasPrice
      ? `${formatUnits(feeData.gasPrice, "gwei")} Gwei`
      : "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
  );

  // 4. –ë–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞
  const address = process.env.ADDRESS;
  if (address) {
    const balance = await provider.getBalance(address);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å ${address}: ${formatUnits(balance, "ether")} ETH`);
  } else {
    console.log("‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env (ADDRESS=...)");
  }
}

main().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:", err);
});
